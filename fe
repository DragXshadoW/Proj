import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';
import 'package:file_picker/file_picker.dart';
import 'package:open_file/open_file.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:path_provider/path_provider.dart';

void main() => runApp(CatalogAIApp());

class CatalogAIApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Catalog AI',
      theme: ThemeData(primarySwatch: Colors.green),
      home: CatalogHomePage(),
    );
  }
}

class CatalogHomePage extends StatefulWidget {
  @override
  _CatalogHomePageState createState() => _CatalogHomePageState();
}

class _CatalogHomePageState extends State<CatalogHomePage> {
  final TextEditingController _textController = TextEditingController();
  List<dynamic> _catalog = [];
  bool _isLoading = false;
  final ImagePicker _picker = ImagePicker();
  final FlutterTts flutterTts = FlutterTts();

  Future<void> _submitTextInput() async {
    final input = _textController.text.trim();
    if (input.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please enter product info')),
      );
      return;
    }
    setState(() => _isLoading = true);

    try {
      final response = await http.post(
        Uri.parse('http://10.0.2.2:5000/add'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'input': input}),
      );

      if (response.statusCode == 200) {
        _textController.clear();
        _speak('Product added successfully');
        await _fetchCatalog();
      } else {
        final error = jsonDecode(response.body)['error'] ?? 'Failed to add product';
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(error)),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _fetchCatalog() async {
    try {
      final response = await http.get(Uri.parse('http://10.0.2.2:5000/catalog'));
      if (response.statusCode == 200) {
        setState(() => _catalog = jsonDecode(response.body));
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to fetch catalog')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching catalog: $e')),
      );
    }
  }

  Future<void> _uploadAudioFile() async {
    final result = await FilePicker.platform.pickFiles(type: FileType.audio);
    if (result == null) return;

    final file = File(result.files.single.path!);
    final request = http.MultipartRequest('POST', Uri.parse('http://10.0.2.2:5000/voice'));
    request.files.add(await http.MultipartFile.fromPath('audio', file.path));

    try {
      final response = await request.send();
      final res = await http.Response.fromStream(response);

      if (response.statusCode == 200) {
        final transcription = jsonDecode(res.body)['transcription'];
        _textController.text = transcription;
      } else {
        final error = jsonDecode(res.body)['error'] ?? 'Failed to transcribe audio';
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(error)),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error uploading audio: $e')),
      );
    }
  }

  Future<void> _pickAndUploadImage() async {
    final XFile? pickedFile = await _picker.pickImage(source: ImageSource.camera);
    if (pickedFile == null) return;

    final imageFile = File(pickedFile.path);
    final request = http.MultipartRequest('POST', Uri.parse('http://10.0.2.2:5000/predict-image'));
    request.files.add(await http.MultipartFile.fromPath('image', imageFile.path));

    try {
      final response = await request.send();
      final respStr = await response.stream.bytesToString();

      if (response.statusCode == 200) {
        final jsonResp = jsonDecode(respStr);
        final predictedProduct = jsonResp['product'] ?? '';
        _textController.text = predictedProduct;
      } else {
        final error = jsonDecode(respStr)['error'] ?? 'Failed to predict image';
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(error)),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error predicting image: $e')),
      );
    }
  }

  Future<void> _downloadPDF() async {
    try {
      final response = await http.get(Uri.parse('http://10.0.2.2:5000/export/pdf'));
      if (response.statusCode == 200) {
        final bytes = response.bodyBytes;
        final dir = await getApplicationDocumentsDirectory();
        final file = File('${dir.path}/catalog_export.pdf');
        await file.writeAsBytes(bytes);
        OpenFile.open(file.path);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to download PDF')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error downloading PDF: $e')),
      );
    }
  }

  Future<void> _speak(String text) async {
    await flutterTts.speak(text);
  }

  @override
  void initState() {
    super.initState();
    _fetchCatalog();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Catalog AI')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _textController,
              decoration: InputDecoration(
                labelText: 'Enter product info',
                suffixIcon: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    IconButton(
                      icon: Icon(Icons.camera_alt),
                      onPressed: _pickAndUploadImage,
                    ),
                    IconButton(
                      icon: Icon(Icons.mic),
                      onPressed: _uploadAudioFile,
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _isLoading ? null : _submitTextInput,
              child: _isLoading
                  ? CircularProgressIndicator(color: Colors.white)
                  : Text('Add to Catalog'),
            ),
            SizedBox(height: 20),
            Expanded(
              child: ListView.builder(
                itemCount: _catalog.length,
                itemBuilder: (context, index) {
                  final item = _catalog[index];
                  return Card(
                    elevation: 2,
                    margin: EdgeInsets.symmetric(vertical: 6),
                    child: ListTile(
                      title: Text(item['product'] ?? 'Unknown'),
                      subtitle: Text(
                        'Qty: ${item['quantity'] ?? 'Unknown'} ${item['unit'] ?? ''}\nDesc: ${item['description'] ?? ''}',
                      ),
                      trailing: Text(item['price']?.toString() ?? 'Unknown'),
                    ),
                  );
                },
              ),
            ),
            SizedBox(height: 10),
            ElevatedButton.icon(
              icon: Icon(Icons.download),
              label: Text('Download PDF Catalog'),
              onPressed: _downloadPDF,
            ),
          ],
        ),
      ),
    );
  }
}